# -*- coding: utf-8 -*-
"""Medical Chatbot

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hruFpNcd-Kovd0jAXp6MHt6E5X2B0KXj
"""

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder

# Sample medical data
data = [(["fever", "cough"], "cold", "rest, drink fluids"),
        (["fever", "fatigue"], "flu", "rest, drink fluids"),
        (["cough", "shortness of breath"], "pneumonia", "antibiotics, rest"),
        (["headache", "nausea"], "migraine", "rest in a quiet, dark room"),
        (["fever", "sore throat"], "streptococcal infection", "antibiotics, rest"),
        (["rash", "itching"], "allergic reaction", "antihistamines, avoid allergens"),
        (["stomach pain", "diarrhea"], "gastroenteritis", "stay hydrated, bland diet"),
        (["chest pain", "shortness of breath"], "heart attack", "seek emergency medical help"),
        (["cough", "wheezing"], "asthma", "inhaled bronchodilators"),
        (["fatigue", "weight loss"], "chronic fatigue syndrome", "rest, fluids, antiviral medication"),
        (["fatigue", "fever"], "influenza", "rest, fluids, antiviral medication"),
        (["joint pain", "fever"], "rheumatoid arthritis", ""),  # Missing treatment data
        (["vomiting", "abdominal pain"], "appendicitis", "medications, physical therapy, surgery to remove the appendix"),
        (["frequent urination", "thirst"], "diabetes", "insulin therapy, dietary changes"),
        (["runny nose", "sneezing"], "common cold", "rest, fluids, over-the-counter meds"),
        (["difficulty swallowing", "weight loss"], "esophageal cancer", "surgery, chemotherapy"),
        (["chest pain", "dizziness"], "angina", "medications, lifestyle changes"),
        (["fatigue", "pale skin"], "anemia", "iron supplements, dietary changes"),
        (["abdominal pain", "bloating"], "irritable bowel syndrome", "dietary changes, stress management"),
        (["rash", "fever"], "measles", "rest, fluids, symptomatic treatment")]

# Split data into input (X) and labels (y)
X = [', '.join(symptoms) for symptoms, _, _ in data]
y_disease = [disease for _, disease, _ in data]
y_treatment = [treatment for _, _, treatment in data]

# Convert symptom input to numerical features
vectorizer = CountVectorizer(tokenizer=lambda x: x.split(', '), lowercase=False)
X_vectorized = vectorizer.fit_transform(X)

# Encode disease and treatment labels
label_encoder_disease = LabelEncoder()
label_encoder_treatment = LabelEncoder()
y_disease_encoded = label_encoder_disease.fit_transform(y_disease)
y_treatment_encoded = label_encoder_treatment.fit_transform(y_treatment)

# Initialize the Random Forest Classifier for disease prediction
rf_classifier_disease = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier_disease.fit(X_vectorized, y_disease_encoded)

# Initialize the Random Forest Classifier for treatment prediction
rf_classifier_treatment = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier_treatment.fit(X_vectorized, y_treatment_encoded)

# User input for symptoms
user_symptoms = input("Please enter your symptoms (comma-separated): ").split(', ')

# Convert user symptoms to numerical features
user_symptoms_text = ', '.join(user_symptoms)
user_symptoms_vectorized = vectorizer.transform([user_symptoms_text])

# Predict disease and treatment based on user symptoms
predicted_disease_encoded = rf_classifier_disease.predict(user_symptoms_vectorized)[0]
predicted_treatment_encoded = rf_classifier_treatment.predict(user_symptoms_vectorized)[0]

# Decode the predicted labels
predicted_disease = label_encoder_disease.inverse_transform([predicted_disease_encoded])[0]
predicted_treatment = label_encoder_treatment.inverse_transform([predicted_treatment_encoded])[0]

print(f"Predicted Disease: {predicted_disease}")
print(f"Predicted Treatment: {predicted_treatment}")